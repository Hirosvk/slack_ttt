c
team_user_status
c
api_path
n
exit
ApplicationContoller.methods
File.read(Rails.root + "app/controllers/application_controller.rb")
Rails.root
File.read("controllers/application_controller.rb")
File.read("controllers/application_controllers.rb")
show fullpath
show full_path
ls
File.read("application_controller.rb")
.cd
File.read("app/controllers/application_controllers.rb")
cd
File.read("./api_path.txt")
File.read("api_path.txt")
exit
accum
n
member["name"]
accum
exit
request.headers.env["HTTP_ORIGIN"]
request.headers.env.keys.include?("origin")
request.headers.env.keys.sort
request.headers.env["ORIGIN"]
request.headers.env
request.headers.origin
request.headers
headers
params
c
headers
c
exit
n
headers
n
headers
c
n
headers
n
headers
exit
request.params["token"]
request.params.token
request.params
request.body.methods
request.body
request.methods.sort
request.methods.sort.join("\n")
request.methods
request.rack.request.form_hash
request["rack.request.form_hash"]
request
c
request
c
request
c
request
exit
c
params[:token]
params
c
params
params[:token]
c
exit
winner
exit
c
exit
c
Board.all
params
params[:user_name]
@board.render
resp[:json][:text]
exit
params[:channel_id]
Challenge.first.channel_id
Challenge.first.channel_Id
Challenge.all
    end
      end
        resp[:json][:text] = @board.errors[:resp]
      else
        resp[:json][:text] = @board.render
      if @board.save!
      @board = @challenge.create_new_game
    else
      resp[:json][:text] = "There is no challenge to accept"
    if @challenge.nil?
    resp = dup(DEFAULT_RESP)
Challenge.find_by_channel_id(channel_id: "C2147483705")@challenge = Challenge.find_valid_challenge(params[:user_name], params[:channel_id])
Challenge.find_by_channel_id(channel_id: "C2147483705")
@challenge
c
params[:user_name]
params
c
params[:user_name]
params
c
challenge
c
challenge
exit
grid
c
grid
exit
almost_tie.
exit
c
game_grid
exit
self
self.id
player
position
exit
self.id
board.id
exit
c
Board.all
exit
Board.all
board1.status
exit
c
board1.status
Board.all
c
exit
c
Board.destroy_all
exit
board1.status
c
exit
self.class.where(channel_id: self.channel_id)
c
board1.status
c
exit
self.status
self.x_player
c
exit
self.o_player
board.x_player
board.status
self.status
c
self.status
c
board.status
self.status
c
board.status
self.status
exit
self
exit
almost_win
almost_win.grid
